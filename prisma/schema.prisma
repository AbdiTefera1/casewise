// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  LAWYER
  PARALEGAL
}

enum CaseStatus {
  ACTIVE
  PENDING
  ARCHIVED
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CompanyType {
  INDIVIDUAL
  COMPANY
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
  URGENT
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
}

enum PaymentStatus {
  COMPLETED
  PENDING
  FAILED
}

// Models
model Organization {
  id          String        @id @default(uuid())
  name        String
  contactInfo Json
  domain      String        @unique
  settings    Json?
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  createdBy   User          @relation("CreatedOrganizations", fields: [createdById], references: [id])
  // Relations
  users       User[]
  cases       Case[]
  clients     Client[]
  Appointment Appointment[]
}

model User {
  id             String    @id @default(uuid())
  organizationId String?
  name           String?
  email          String    @unique
  password       String
  role           UserRole
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relations
  organization         Organization?  @relation(fields: [organizationId], references: [id])
  cases                Case[]         @relation("LawyerCases")
  tasks                Task[]
  appointments         Appointment[]
  notifications        Notification[]
  createdOrganizations Organization[] @relation("CreatedOrganizations")
  lawyer               Lawyer?

  @@index([organizationId])
}

model Case {
  id             String     @id @default(uuid())
  organizationId String
  clientId       String?
  lawyerId       String
  title          String
  description    String     @db.Text
  status         CaseStatus
  caseNumber     String
  startDate      DateTime?
  endDate        DateTime?
  deletedAt      DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id])
  client       Client?       @relation(fields: [clientId], references: [id])
  lawyer       User          @relation("LawyerCases", fields: [lawyerId], references: [id])
  tasks        Task[]
  appointments Appointment[]
  documents    Document[]
  invoices     Invoice[]

  @@index([organizationId])
  @@index([clientId])
  @@index([lawyerId])
}

model Client {
  id             String        @id @default(uuid())
  organizationId String
  name           String
  email          String?
  type           CompanyType?
  contactInfo    Json?
  clientNumber   String
  companyName    String?
  industry       String?
  website        String?
  notes          String?
  customFields   String?
  status         ClientStatus?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])
  cases        Case[]
  appointments Appointment[]
  invoices     Invoice[]

  @@index([organizationId])
}

model Lawyer {
  id              String   @id @default(uuid())
  userId          String   @unique
  specializations String[]
  barNumber       String
  licenseStatus   String
  jurisdictions   String[]
  hourlyRate      Float
  contactInfo     Json
  availability    Json
  status          String   @default("ACTIVE")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([barNumber])
}

model Task {
  id          String       @id @default(uuid())
  caseId      String
  assignedTo  String
  title       String
  description String       @db.Text
  priority    TaskPriority
  status      TaskStatus
  dueDate     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  case     Case @relation(fields: [caseId], references: [id])
  assignee User @relation(fields: [assignedTo], references: [id])

  @@index([caseId])
  @@index([assignedTo])
}

model Appointment {
  id              String             @id @default(uuid())
  caseId          String
  clientId        String
  lawyerId        String
  title           String
  description     String
  organizationId  String?
  appointmentDate DateTime
  startTime       DateTime?
  endTime         DateTime?
  location        String
  type            AppointmentType?
  status          AppointmentStatus?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])
  case         Case         @relation(fields: [caseId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  lawyer       User         @relation(fields: [lawyerId], references: [id])

  @@index([caseId])
  @@index([clientId])
  @@index([lawyerId])
}

model Document {
  id         String   @id @default(uuid())
  caseId     String
  fileName   String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())

  // Relations
  case Case @relation(fields: [caseId], references: [id])

  @@index([caseId])
}

model Invoice {
  id        String        @id @default(uuid())
  clientId  String
  caseId    String
  amountDue Decimal       @db.Decimal(10, 2)
  dueDate   DateTime
  status    InvoiceStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  client   Client    @relation(fields: [clientId], references: [id])
  case     Case      @relation(fields: [caseId], references: [id])
  payments Payment[]

  @@index([clientId])
  @@index([caseId])
}

model Payment {
  id            String        @id @default(uuid())
  invoiceId     String
  amountPaid    Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime
  paymentMethod PaymentMethod
  status        PaymentStatus

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
