// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  LAWYER
  PARALEGAL
}

enum CaseStatus {
  ACTIVE
  PENDING
  CLOSED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
}

enum PaymentStatus {
  COMPLETED
  PENDING
  FAILED
}

// Models
model Organization {
  id          String   @id @default(uuid())
  name        String
  contactInfo Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users   User[]
  cases   Case[]
  clients Client[]
}

model User {
  id             String    @id @default(uuid())
  organizationId String?
  email          String    @unique
  password       String
  role           UserRole
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relations
  organization  Organization?  @relation(fields: [organizationId], references: [id])
  cases         Case[]         @relation("LawyerCases")
  tasks         Task[]
  appointments  Appointment[]
  notifications Notification[]

  @@index([organizationId])
}

model Case {
  id             String     @id @default(uuid())
  organizationId String
  clientId       String
  lawyerId       String
  title          String
  description    String     @db.Text
  status         CaseStatus
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id])
  client       Client        @relation(fields: [clientId], references: [id])
  lawyer       User          @relation("LawyerCases", fields: [lawyerId], references: [id])
  tasks        Task[]
  appointments Appointment[]
  documents    Document[]
  invoices     Invoice[]

  @@index([organizationId])
  @@index([clientId])
  @@index([lawyerId])
}

model Client {
  id             String   @id @default(uuid())
  organizationId String?
  name           String?
  contactInfo    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id])
  cases        Case[]
  appointments Appointment[]
  invoices     Invoice[]

  @@index([organizationId])
}

model Task {
  id          String       @id @default(uuid())
  caseId      String
  assignedTo  String
  title       String
  description String       @db.Text
  priority    TaskPriority
  status      TaskStatus
  dueDate     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  case     Case @relation(fields: [caseId], references: [id])
  assignee User @relation(fields: [assignedTo], references: [id])

  @@index([caseId])
  @@index([assignedTo])
}

model Appointment {
  id              String   @id @default(uuid())
  caseId          String
  clientId        String
  lawyerId        String
  appointmentDate DateTime
  location        String
  notes           String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  case   Case   @relation(fields: [caseId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
  lawyer User   @relation(fields: [lawyerId], references: [id])

  @@index([caseId])
  @@index([clientId])
  @@index([lawyerId])
}

model Document {
  id         String   @id @default(uuid())
  caseId     String
  fileName   String
  fileUrl    String
  fileType   String
  uploadedAt DateTime @default(now())

  // Relations
  case Case @relation(fields: [caseId], references: [id])

  @@index([caseId])
}

model Invoice {
  id        String        @id @default(uuid())
  clientId  String
  caseId    String
  amountDue Decimal       @db.Decimal(10, 2)
  dueDate   DateTime
  status    InvoiceStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  client   Client    @relation(fields: [clientId], references: [id])
  case     Case      @relation(fields: [caseId], references: [id])
  payments Payment[]

  @@index([clientId])
  @@index([caseId])
}

model Payment {
  id            String        @id @default(uuid())
  invoiceId     String
  amountPaid    Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime
  paymentMethod PaymentMethod
  status        PaymentStatus

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
